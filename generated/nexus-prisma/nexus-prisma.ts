/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      OverwatchCharacters: OverwatchCharactersObject
      OverwatchCharactersConnection: OverwatchCharactersConnectionObject
      PageInfo: PageInfoObject
      OverwatchCharactersEdge: OverwatchCharactersEdgeObject
      AggregateOverwatchCharacters: AggregateOverwatchCharactersObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      OverwatchCharactersSubscriptionPayload: OverwatchCharactersSubscriptionPayloadObject
      OverwatchCharactersPreviousValues: OverwatchCharactersPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      OverwatchCharacters: OverwatchCharactersFieldDetails
      OverwatchCharactersConnection: OverwatchCharactersConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      OverwatchCharactersEdge: OverwatchCharactersEdgeFieldDetails
      AggregateOverwatchCharacters: AggregateOverwatchCharactersFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      OverwatchCharactersSubscriptionPayload: OverwatchCharactersSubscriptionPayloadFieldDetails
      OverwatchCharactersPreviousValues: OverwatchCharactersPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      OverwatchCharactersWhereUniqueInput: OverwatchCharactersWhereUniqueInputInputObject
      OverwatchCharactersWhereInput: OverwatchCharactersWhereInputInputObject
      OverwatchCharactersCreateInput: OverwatchCharactersCreateInputInputObject
      OverwatchCharactersUpdateInput: OverwatchCharactersUpdateInputInputObject
      OverwatchCharactersUpdateManyMutationInput: OverwatchCharactersUpdateManyMutationInputInputObject
      OverwatchCharactersSubscriptionWhereInput: OverwatchCharactersSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    OverwatchCharactersOrderByInput: OverwatchCharactersOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'overwatchCharacters', args?: QueryOverwatchCharactersArgs[] | false, alias?: string  } 
  | { name: 'overwatchCharacterses', args?: QueryOverwatchCharactersesArgs[] | false, alias?: string  } 
  | { name: 'overwatchCharactersesConnection', args?: QueryOverwatchCharactersesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'overwatchCharacters'
  | 'overwatchCharacterses'
  | 'overwatchCharactersesConnection'


type QueryOverwatchCharactersArgs =
  | 'where'
type QueryOverwatchCharactersesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOverwatchCharactersesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  overwatchCharacters: {
    type: 'OverwatchCharacters'
    args: Record<QueryOverwatchCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: OverwatchCharactersWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverwatchCharacters | null> | prisma.OverwatchCharacters | null
  }
  overwatchCharacterses: {
    type: 'OverwatchCharacters'
    args: Record<QueryOverwatchCharactersesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OverwatchCharactersWhereInput | null, orderBy?: prisma.OverwatchCharactersOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverwatchCharacters[]> | prisma.OverwatchCharacters[]
  }
  overwatchCharactersesConnection: {
    type: 'OverwatchCharactersConnection'
    args: Record<QueryOverwatchCharactersesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OverwatchCharactersWhereInput | null, orderBy?: prisma.OverwatchCharactersOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverwatchCharactersConnection> | prisma.OverwatchCharactersConnection
  }
}
  

// Types for OverwatchCharacters

type OverwatchCharactersObject =
  | OverwatchCharactersFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'hometown', args?: [] | false, alias?: string  } 
  | { name: 'catchPhrase', args?: [] | false, alias?: string  } 

type OverwatchCharactersFields =
  | 'id'
  | 'name'
  | 'hometown'
  | 'catchPhrase'



  

export interface OverwatchCharactersFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hometown: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  catchPhrase: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for OverwatchCharactersConnection

type OverwatchCharactersConnectionObject =
  | OverwatchCharactersConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type OverwatchCharactersConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface OverwatchCharactersConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OverwatchCharactersConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OverwatchCharactersEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OverwatchCharactersConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverwatchCharactersEdge[]> | prisma.OverwatchCharactersEdge[]
  }
  aggregate: {
    type: 'AggregateOverwatchCharacters'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OverwatchCharactersConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateOverwatchCharacters> | prisma.AggregateOverwatchCharacters
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for OverwatchCharactersEdge

type OverwatchCharactersEdgeObject =
  | OverwatchCharactersEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type OverwatchCharactersEdgeFields =
  | 'node'
  | 'cursor'



  

export interface OverwatchCharactersEdgeFieldDetails {
  node: {
    type: 'OverwatchCharacters'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OverwatchCharactersEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverwatchCharacters> | prisma.OverwatchCharacters
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateOverwatchCharacters

type AggregateOverwatchCharactersObject =
  | AggregateOverwatchCharactersFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateOverwatchCharactersFields =
  | 'count'



  

export interface AggregateOverwatchCharactersFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createOverwatchCharacters', args?: MutationCreateOverwatchCharactersArgs[] | false, alias?: string  } 
  | { name: 'updateOverwatchCharacters', args?: MutationUpdateOverwatchCharactersArgs[] | false, alias?: string  } 
  | { name: 'updateManyOverwatchCharacterses', args?: MutationUpdateManyOverwatchCharactersesArgs[] | false, alias?: string  } 
  | { name: 'upsertOverwatchCharacters', args?: MutationUpsertOverwatchCharactersArgs[] | false, alias?: string  } 
  | { name: 'deleteOverwatchCharacters', args?: MutationDeleteOverwatchCharactersArgs[] | false, alias?: string  } 
  | { name: 'deleteManyOverwatchCharacterses', args?: MutationDeleteManyOverwatchCharactersesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createOverwatchCharacters'
  | 'updateOverwatchCharacters'
  | 'updateManyOverwatchCharacterses'
  | 'upsertOverwatchCharacters'
  | 'deleteOverwatchCharacters'
  | 'deleteManyOverwatchCharacterses'


type MutationCreateOverwatchCharactersArgs =
  | 'data'
type MutationUpdateOverwatchCharactersArgs =
  | 'data'
  | 'where'
type MutationUpdateManyOverwatchCharactersesArgs =
  | 'data'
  | 'where'
type MutationUpsertOverwatchCharactersArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteOverwatchCharactersArgs =
  | 'where'
type MutationDeleteManyOverwatchCharactersesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createOverwatchCharacters: {
    type: 'OverwatchCharacters'
    args: Record<MutationCreateOverwatchCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OverwatchCharactersCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverwatchCharacters> | prisma.OverwatchCharacters
  }
  updateOverwatchCharacters: {
    type: 'OverwatchCharacters'
    args: Record<MutationUpdateOverwatchCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OverwatchCharactersUpdateInput, where: OverwatchCharactersWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverwatchCharacters | null> | prisma.OverwatchCharacters | null
  }
  updateManyOverwatchCharacterses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOverwatchCharactersesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OverwatchCharactersUpdateManyMutationInput, where?: OverwatchCharactersWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOverwatchCharacters: {
    type: 'OverwatchCharacters'
    args: Record<MutationUpsertOverwatchCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OverwatchCharactersWhereUniqueInput, create: OverwatchCharactersCreateInput, update: OverwatchCharactersUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverwatchCharacters> | prisma.OverwatchCharacters
  }
  deleteOverwatchCharacters: {
    type: 'OverwatchCharacters'
    args: Record<MutationDeleteOverwatchCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OverwatchCharactersWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverwatchCharacters | null> | prisma.OverwatchCharacters | null
  }
  deleteManyOverwatchCharacterses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOverwatchCharactersesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: OverwatchCharactersWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'overwatchCharacters', args?: SubscriptionOverwatchCharactersArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'overwatchCharacters'


type SubscriptionOverwatchCharactersArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  overwatchCharacters: {
    type: 'OverwatchCharactersSubscriptionPayload'
    args: Record<SubscriptionOverwatchCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: OverwatchCharactersSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverwatchCharactersSubscriptionPayload | null> | prisma.OverwatchCharactersSubscriptionPayload | null
  }
}
  

// Types for OverwatchCharactersSubscriptionPayload

type OverwatchCharactersSubscriptionPayloadObject =
  | OverwatchCharactersSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type OverwatchCharactersSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface OverwatchCharactersSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OverwatchCharactersSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'OverwatchCharacters'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OverwatchCharactersSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverwatchCharacters | null> | prisma.OverwatchCharacters | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OverwatchCharactersPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OverwatchCharactersSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverwatchCharactersPreviousValues | null> | prisma.OverwatchCharactersPreviousValues | null
  }
}
  

// Types for OverwatchCharactersPreviousValues

type OverwatchCharactersPreviousValuesObject =
  | OverwatchCharactersPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'hometown', args?: [] | false, alias?: string  } 
  | { name: 'catchPhrase', args?: [] | false, alias?: string  } 

type OverwatchCharactersPreviousValuesFields =
  | 'id'
  | 'name'
  | 'hometown'
  | 'catchPhrase'



  

export interface OverwatchCharactersPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hometown: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  catchPhrase: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface OverwatchCharactersWhereUniqueInput {
  id?: string | null
}
export type OverwatchCharactersWhereUniqueInputInputObject =
  | Extract<keyof OverwatchCharactersWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface OverwatchCharactersWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  hometown?: string | null
  hometown_not?: string | null
  hometown_in?: string[]
  hometown_not_in?: string[]
  hometown_lt?: string | null
  hometown_lte?: string | null
  hometown_gt?: string | null
  hometown_gte?: string | null
  hometown_contains?: string | null
  hometown_not_contains?: string | null
  hometown_starts_with?: string | null
  hometown_not_starts_with?: string | null
  hometown_ends_with?: string | null
  hometown_not_ends_with?: string | null
  catchPhrase?: string | null
  catchPhrase_not?: string | null
  catchPhrase_in?: string[]
  catchPhrase_not_in?: string[]
  catchPhrase_lt?: string | null
  catchPhrase_lte?: string | null
  catchPhrase_gt?: string | null
  catchPhrase_gte?: string | null
  catchPhrase_contains?: string | null
  catchPhrase_not_contains?: string | null
  catchPhrase_starts_with?: string | null
  catchPhrase_not_starts_with?: string | null
  catchPhrase_ends_with?: string | null
  catchPhrase_not_ends_with?: string | null
  AND?: OverwatchCharactersWhereInput[]
  OR?: OverwatchCharactersWhereInput[]
  NOT?: OverwatchCharactersWhereInput[]
}
export type OverwatchCharactersWhereInputInputObject =
  | Extract<keyof OverwatchCharactersWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'hometown', alias?: string  } 
  | { name: 'hometown_not', alias?: string  } 
  | { name: 'hometown_in', alias?: string  } 
  | { name: 'hometown_not_in', alias?: string  } 
  | { name: 'hometown_lt', alias?: string  } 
  | { name: 'hometown_lte', alias?: string  } 
  | { name: 'hometown_gt', alias?: string  } 
  | { name: 'hometown_gte', alias?: string  } 
  | { name: 'hometown_contains', alias?: string  } 
  | { name: 'hometown_not_contains', alias?: string  } 
  | { name: 'hometown_starts_with', alias?: string  } 
  | { name: 'hometown_not_starts_with', alias?: string  } 
  | { name: 'hometown_ends_with', alias?: string  } 
  | { name: 'hometown_not_ends_with', alias?: string  } 
  | { name: 'catchPhrase', alias?: string  } 
  | { name: 'catchPhrase_not', alias?: string  } 
  | { name: 'catchPhrase_in', alias?: string  } 
  | { name: 'catchPhrase_not_in', alias?: string  } 
  | { name: 'catchPhrase_lt', alias?: string  } 
  | { name: 'catchPhrase_lte', alias?: string  } 
  | { name: 'catchPhrase_gt', alias?: string  } 
  | { name: 'catchPhrase_gte', alias?: string  } 
  | { name: 'catchPhrase_contains', alias?: string  } 
  | { name: 'catchPhrase_not_contains', alias?: string  } 
  | { name: 'catchPhrase_starts_with', alias?: string  } 
  | { name: 'catchPhrase_not_starts_with', alias?: string  } 
  | { name: 'catchPhrase_ends_with', alias?: string  } 
  | { name: 'catchPhrase_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OverwatchCharactersCreateInput {
  name?: string
  hometown?: string | null
  catchPhrase?: string | null
}
export type OverwatchCharactersCreateInputInputObject =
  | Extract<keyof OverwatchCharactersCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'hometown', alias?: string  } 
  | { name: 'catchPhrase', alias?: string  } 
  
export interface OverwatchCharactersUpdateInput {
  name?: string | null
  hometown?: string | null
  catchPhrase?: string | null
}
export type OverwatchCharactersUpdateInputInputObject =
  | Extract<keyof OverwatchCharactersUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'hometown', alias?: string  } 
  | { name: 'catchPhrase', alias?: string  } 
  
export interface OverwatchCharactersUpdateManyMutationInput {
  name?: string | null
  hometown?: string | null
  catchPhrase?: string | null
}
export type OverwatchCharactersUpdateManyMutationInputInputObject =
  | Extract<keyof OverwatchCharactersUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'hometown', alias?: string  } 
  | { name: 'catchPhrase', alias?: string  } 
  
export interface OverwatchCharactersSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OverwatchCharactersWhereInput | null
  AND?: OverwatchCharactersSubscriptionWhereInput[]
  OR?: OverwatchCharactersSubscriptionWhereInput[]
  NOT?: OverwatchCharactersSubscriptionWhereInput[]
}
export type OverwatchCharactersSubscriptionWhereInputInputObject =
  | Extract<keyof OverwatchCharactersSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type OverwatchCharactersOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'hometown_ASC'
  | 'hometown_DESC'
  | 'catchPhrase_ASC'
  | 'catchPhrase_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  